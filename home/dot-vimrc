" Options
syntax on
colorscheme habamax

let mapleader = " "
let maplocalleader = " "

" Change cursor
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

set number
set relativenumber 
set scrolloff=8
set sidescrolloff=8
set cursorline
set mouse=a
set hlsearch
set incsearch
set autoread

set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent

set nrformats=bin,hex
set completeopt=menuone,noselect,fuzzy
set wildmode=longest:full,full
set wildignore+=*.o,*.obj,*.pyc,*.class,*.jar
set history=200
set nobackup
set nowritebackup
set undofile
let s:undo_dir = expand("~/.local/state/vim/undo//")
if !isdirectory(s:undo_dir)
  call mkdir(s:undo_dir, "p")
endif
execute 'set undodir=' . s:undo_dir
set noswapfile

set signcolumn=yes
set pumheight=10
set synmaxcol=300
set updatetime=300
set timeoutlen=500
set ttimeoutlen=0

set iskeyword+=-
set path+=**

set splitbelow
set splitright

set foldlevel=99
set diffopt+=linematch:60
set maxmempattern=20000

inoremap jk <esc>
cnoremap jk <C-C>

" Keymaps

function! s:OpenTermWithCurrentFile()
  botright split
  execute 'terminal' fnameescape(expand('%:p'))
  startinsert!
endfunction

nnoremap <leader>x :call <SID>OpenTermWithCurrentFile()<CR>
nnoremap <leader><leader>v :so<cr>

nnoremap my "+y
xnoremap my "+y
nnoremap mY "+Y
nnoremap mp "+p
xnoremap mp "+P

nnoremap <leader>e :Explore<cr>
nnoremap <leader>f :find 
nnoremap <leader>g :vimgrep  **/*<left><left><left><left><left>

nnoremap <a-t><a-t> :tabclose<cr>

nnoremap <C-l> <cmd>nohlsearch<cr><C-l>
inoremap <C-l> <cmd>nohlsearch<cr>

" Insert and Command
inoremap <C-e> <End>
cnoremap <A-e> <End>
inoremap <C-a> <Home>
cnoremap <A-a> <Home>
inoremap <C-b> <Left>
cnoremap <C-b> <Left>
inoremap <C-f> <Right>
cnoremap <C-f> <Right>
inoremap <C-d> <Del>
cnoremap <C-d> <Del>
inoremap <A-d> <C-o>b
inoremap <A-f> <C-o>w
inoremap <C-m> <C-o>d$
inoremap <A-d> <C-o>dw


" Resize with arrowkeys
nnoremap <A-Up> :resize +1<cr>
nnoremap <A-Down> :resize -1<cr>
nnoremap <A-Left> :vertical resize -1<cr>
nnoremap <A-Right> :vertical resize +1<cr>

nnoremap ]b <cmd>bnext<cr>
nnoremap [b <cmd>bprev<cr>
nnoremap ]q <cmd>cnext<cr>
nnoremap [q <cmd>cprev<cr>
nnoremap <A-q> <cmd>cclose<cr>
nnoremap <A-o> <cmd>copen<cr>

nnoremap <leader>w :w<cr>
nnoremap <leader>W :w!<cr>
nnoremap <leader>c <C-w>c
nnoremap <leader>q :conf q<cr>

xnoremap > >gv 
xnoremap < <gv
xnoremap p _dP

xnoremap <S-j> :move '>+1<cr>gv-gv
xnoremap <S-k> :move '<-2<cr>gv-gv

nnoremap <leader>cp :let @+ = expand('%:p') \| echo 'Copied path to clipboard: ' . @+<CR>

" Toggle terminal
let g:terminal_bufnr = -1
let g:terminal_winid = -1

function! ToggleTerminal()
  " If terminal window is open and valid
  if g:terminal_winid != -1 && winbufnr(g:terminal_winid) == g:terminal_bufnr
    " In terminal mode? Exit to normal
    if mode() ==# 't'
      call feedkeys("\<C-\\>\<C-n>", 'n')
    endif
    call win_execute(g:terminal_winid, 'hide')
    let g:terminal_winid = -1
    return
  endif

  " Terminal buffer exists and is valid
  if g:terminal_bufnr != -1 && bufexists(g:terminal_bufnr)
    " Reuse buffer
    belowright split
    exec 'buffer ' . g:terminal_bufnr
    let g:terminal_winid = win_getid()
    normal i
  else
    " Create new terminal
    terminal
    setlocal nobuflisted
    let g:terminal_bufnr = bufnr('%')
    let g:terminal_winid = win_getid()
    startinsert
  endif

endfunction

nnoremap <C-t> :call ToggleTerminal()<CR>
tnoremap <C-t> <C-\><C-n>:call ToggleTerminal()<CR>


" Autocommands

augroup GeneralSettings
  autocmd!
  autocmd TextYankPost * silent! call s:FlashYankedText()
  
  autocmd FileType qf,help,man nnoremap <buffer> <silent> q :close<cr>

  autocmd BufWinEnter * setlocal formatoptions-=c

  autocmd Filetype qf setlocal nobuflisted

  " Return to last edited position when reopening a file
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute "normal! g`\"" |
    \ endif

augroup END

augroup FiletypeIndent
  autocmd!
  autocmd FileType python setlocal tabstop=4 shiftwidth=4
  autocmd FileType c,cpp,rust,javascript,typescript,json,html,css setlocal tabstop=2 shiftwidth=2
augroup END

augroup MailSettings
  autocmd!
  autocmd FileType mail setlocal textwidth=0 wrapmargin=0 formatoptions-=t formatoptions-=a spell
augroup END

augroup GitSettings
  autocmd!
  autocmd FileType gitcommit setlocal wrap spell
augroup END

augroup MarkdownSetting
  autocmd!
  autocmd FileType markdown setlocal wrap spell
augroup END

" Stolen from: https://www.statox.fr/posts/2020/07/vim_flash_yanked_textf
function! s:FlashYankedText()
    if (!exists('g:yankedTextMatches'))
        let g:yankedTextMatches = []
    endif

    let matchId = matchadd('IncSearch', ".\\%>'\\[\\_.*\\%<']..")
    let windowId = winnr()

    call add(g:yankedTextMatches, [windowId, matchId])
    call timer_start(200, 's:DeleteTemporaryMatch')
endfunction

function! s:DeleteTemporaryMatch(timerId)
    while !empty(g:yankedTextMatches)
        let match = remove(g:yankedTextMatches, 0)
        let windowID = match[0]
        let matchID = match[1]

        try
            call matchdelete(matchID, windowID)
        endtry
    endwhile
endfunction
